2007-01-11  Jakub Jelinek  <jakub@redhat.com>

	* stdlib/strtod_l.c (____STRTOF_INTERNAL): Fix handling of multi-byte
	thousands separators.
	* stdlib/Makefile: Add rules to build and run tst-strtod4.
	* stdlib/tst-strtod4.c: New test.

	[BZ #3855]
	* stdlib/strtod_l.c (____STRTOF_INTERNAL): 0x. not followed by
	hexadecimal digit should accept just the initial 0.
	* stdlib/tst-strtod2.c (tests): New variable.
	(do_test): Run several tests rather than just one.

--- libc/stdlib/Makefile	3 Jan 2007 22:42:33 -0000	1.116
+++ libc/stdlib/Makefile	11 Jan 2007 17:37:12 -0000	1.117
@@ -68,7 +68,7 @@ tests		:= tst-strtol tst-strtod testmb t
 		   tst-limits tst-rand48 bug-strtod tst-setcontext	    \
 		   test-a64l tst-qsort tst-system testmb2 bug-strtod2	    \
 		   tst-atof1 tst-atof2 tst-strtod2 tst-strtod3 tst-rand48-2 \
-		   tst-makecontext
+		   tst-makecontext tst-strtod4
 
 include ../Makeconfig
 
@@ -114,6 +114,7 @@ test-canon-ARGS = --test-dir=${common-ob
 
 tst-strtod-ENV = LOCPATH=$(common-objpfx)localedata
 tst-strtod3-ENV = LOCPATH=$(common-objpfx)localedata
+tst-strtod4-ENV = LOCPATH=$(common-objpfx)localedata
 testmb2-ENV = LOCPATH=$(common-objpfx)localedata
 
 # Run a test on the header files we use.
--- libc/stdlib/strtod_l.c	11 Dec 2006 21:43:48 -0000	1.19
+++ libc/stdlib/strtod_l.c	11 Jan 2007 17:35:29 -0000	1.21
@@ -650,10 +651,11 @@ ____STRTOF_INTERNAL (nptr, endptr, group
 	  if (c != '0')
 	    {
 	      for (cnt = 0; thousands[cnt] != '\0'; ++cnt)
-		if (c != thousands[cnt])
+		if (thousands[cnt] != cp[cnt])
 		  break;
 	      if (thousands[cnt] != '\0')
 		break;
+	      cp += cnt - 1;
 	    }
 	  c = *++cp;
 	}
@@ -665,14 +667,23 @@ ____STRTOF_INTERNAL (nptr, endptr, group
   if (!((c >= L_('0') && c <= L_('9'))
 	|| (base == 16 && ((CHAR_TYPE) TOLOWER (c) >= L_('a')
 			   && (CHAR_TYPE) TOLOWER (c) <= L_('f')))
+	|| (
 #ifdef USE_WIDE_CHAR
-	|| c == (wint_t) decimal
+	    c == (wint_t) decimal
 #else
-	|| ({ for (cnt = 0; decimal[cnt] != '\0'; ++cnt)
-	      if (decimal[cnt] != cp[cnt])
-		break;
-	      decimal[cnt] == '\0'; })
-#endif
+	    ({ for (cnt = 0; decimal[cnt] != '\0'; ++cnt)
+		 if (decimal[cnt] != cp[cnt])
+		   break;
+	       decimal[cnt] == '\0'; })
+#endif
+	    /* '0x.' alone is not a valid hexadecimal number.
+	       '.' alone is not valid either, but that has been checked
+	       already earlier.  */
+	    && (base != 16
+		|| cp != start_of_digits
+		|| (cp[decimal_len] >= L_('0') && cp[decimal_len] <= L_('9'))
+		|| ((CHAR_TYPE) TOLOWER (cp[decimal_len]) >= L_('a')
+		    && (CHAR_TYPE) TOLOWER (cp[decimal_len]) <= L_('f'))))
 	|| (base == 16 && (cp != start_of_digits
 			   && (CHAR_TYPE) TOLOWER (c) == L_('p')))
 	|| (base != 16 && (CHAR_TYPE) TOLOWER (c) == L_('e'))))
@@ -715,6 +726,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group
 		  break;
 	      if (thousands[cnt] != '\0')
 		break;
+	      cp += cnt - 1;
 	    }
 #endif
 	}
--- libc/stdlib/tst-strtod2.c	11 Dec 2006 21:36:30 -0000	1.2
+++ libc/stdlib/tst-strtod2.c	11 Jan 2007 17:27:16 -0000	1.3
@@ -1,22 +1,41 @@
 #include <stdio.h>
 #include <stdlib.h>
 
+struct test
+{
+  const char *str;
+  double result;
+  size_t offset;
+} tests[] =
+{
+  { "0xy", 0.0, 1 },
+  { "0x.y", 0.0, 1 },
+  { "0x0.y", 0.0, 4 },
+  { "0x.0y", 0.0, 4 },
+  { ".y", 0.0, 0 },
+  { "0.y", 0.0, 2 },
+  { ".0y", 0.0, 2 }
+};
+
 static int
 do_test (void)
 {
   int status = 0;
-  const char s[] = "0x";
-  char *ep;
-  double r = strtod (s, &ep);
-  if (r != 0)
-    {
-      printf ("r = %g, expect 0\n", r);
-      status = 1;
-    }
-  if (ep != s + 1)
+  for (size_t i = 0; i < sizeof (tests) / sizeof (tests[0]); ++i)
     {
-      printf ("strtod parsed %ju characters, expected 1\n", ep - s);
-      status = 1;
+      char *ep;
+      double r = strtod (tests[i].str, &ep);
+      if (r != tests[i].result)
+	{
+	  printf ("test %zu r = %g, expect %g\n", i, r, tests[i].result);
+	  status = 1;
+	}
+      if (ep != tests[i].str + tests[i].offset)
+	{
+	  printf ("test %zu strtod parsed %ju characters, expected %zu\n",
+		  i, ep - tests[i].str, tests[i].offset);
+	  status = 1;
+	}
     }
   return status;
 }
--- libc/stdlib/tst-strtod4.c	1 Jan 1970 00:00:00 -0000
+++ libc/stdlib/tst-strtod4.c	11 Jan 2007 17:36:58 -0000	1.1
@@ -0,0 +1,56 @@
+#include <locale.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define NBSP "\xc2\xa0"
+
+static const struct
+{
+  const char *in;
+  const char *out;
+  double expected;
+} tests[] =
+  {
+    { "000"NBSP"000"NBSP"000", "", 0.0 },
+    { "1"NBSP"000"NBSP"000,5x", "x", 1000000.5 }
+  };
+#define NTESTS (sizeof (tests) / sizeof (tests[0]))
+
+
+static int
+do_test (void)
+{
+  if (setlocale (LC_ALL, "cs_CZ.UTF-8") == NULL)
+    {
+      puts ("could not set locale");
+      return 1;
+    }
+
+  int status = 0;
+
+  for (int i = 0; i < NTESTS; ++i)
+    {
+      char *ep;
+      double r = __strtod_internal (tests[i].in, &ep, 1);
+
+      if (strcmp (ep, tests[i].out) != 0)
+	{
+	  printf ("%d: got rest string \"%s\", expected \"%s\"\n",
+		  i, ep, tests[i].out);
+	  status = 1;
+	}
+
+      if (r != tests[i].expected)
+	{
+	  printf ("%d: got wrong results %g, expected %g\n",
+		  i, r, tests[i].expected);
+	  status = 1;
+	}
+    }
+
+  return status;
+}
+
+#define TEST_FUNCTION do_test ()
+#include "../test-skeleton.c"
